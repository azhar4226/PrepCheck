version: '3.8'

services:
  # Redis service for Celery
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped

  # Backend Flask application
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    ports:
      - "8000:8000"
    environment:
      - FLASK_ENV=production
      - SECRET_KEY=your-production-secret-key-change-this
      - REDIS_URL=redis://redis:6379/0
      - DATABASE_URL=sqlite:///instance/app.db
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - MAIL_SERVER=${MAIL_SERVER}
      - MAIL_PORT=${MAIL_PORT}
      - MAIL_USERNAME=${MAIL_USERNAME}
      - MAIL_PASSWORD=${MAIL_PASSWORD}
    volumes:
      - backend_data:/app/instance
    depends_on:
      - redis
    restart: unless-stopped

  # Celery worker for background tasks
  celery:
    build:
      context: .
      dockerfile: Dockerfile.backend
    command: celery -A app.celery worker --loglevel=info
    environment:
      - FLASK_ENV=production
      - SECRET_KEY=your-production-secret-key-change-this
      - REDIS_URL=redis://redis:6379/0
      - DATABASE_URL=sqlite:///instance/app.db
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - MAIL_SERVER=${MAIL_SERVER}
      - MAIL_PORT=${MAIL_PORT}
      - MAIL_USERNAME=${MAIL_USERNAME}
      - MAIL_PASSWORD=${MAIL_PASSWORD}
    volumes:
      - backend_data:/app/instance
    depends_on:
      - redis
      - backend
    restart: unless-stopped

  # Frontend Vue.js application
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    ports:
      - "80:80"
    depends_on:
      - backend
    restart: unless-stopped

volumes:
  redis_data:
  backend_data: